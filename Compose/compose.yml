#version: "3.8"

services:

  # Nginx for backend load balancing
  nginx-backend:
    image: nginx
    container_name: nginx-backend-container
    restart: always
    ports:
      - 8090:8090
    volumes:
      - ./nginx-backend.conf:/etc/nginx/nginx.conf
    networks:
      - backend-network
    depends_on:
      - backend1
      - backend2
      - backend3

  # Nginx for frontend load balancing
  nginx-frontend:
    image: nginx
    container_name: nginx-frontend-container
    restart: always
    ports:
      - 8070:80
    volumes:
      - ./nginx-frontend.conf:/etc/nginx/nginx.conf
    networks:
      - frontend-network
    depends_on:
      - frontend1
      - frontend2
      - frontend3

  postgres:

    ports:
      - 5432:5432
    container_name: postgres-container
    environment:
      POSTGRES_PASSWORD: postgres
    networks:
      - backend-network
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    image: postgres
    deploy:
      restart_policy:
        condition: on-failure

  # Backend services
  backend1:
    container_name: backend1
    environment:
      DB_HOST: postgres-container
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    networks:
      - backend-network
    image: nelsoncereno/payroll-backend
    depends_on:
      - postgres

  backend2:
    container_name: backend2
    environment:
      DB_HOST: postgres-container
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    networks:
      - backend-network
    image: nelsoncereno/payroll-backend
    depends_on:
      - postgres

  backend3:
    container_name: backend3
    environment:
      DB_HOST: postgres-container
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    networks:
      - backend-network
    image: nelsoncereno/payroll-backend
    depends_on:
      - postgres
  # Frontend services
  frontend1:
    container_name: frontend1
    image: nelsoncereno/payroll-frontend
    networks:
      - frontend-network
    deploy:
      restart_policy:
        condition: on-failure

  frontend2:
    container_name: frontend2
    image: nelsoncereno/payroll-frontend
    networks:
      - frontend-network
    deploy:
      restart_policy:
        condition: on-failure

  frontend3:
    container_name: frontend3
    image: nelsoncereno/payroll-frontend
    networks:
      - frontend-network
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  postgres-volume:

networks:
  backend-network:
  frontend-network:
